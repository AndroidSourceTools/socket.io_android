/**
 * @author Joyce Hong
 * @email soja0524@gmail.com
 * @create date 2019-08-06 13:02:34
 * @modify date 2019-08-06 13:02:34
 * @desc This file is in charge of main funtions of node.js sever 
 */


const express = require('express');
const bodyParser = require('body-parser');

// Routers
const user = require('./routes/user')
const personality = require('./routes/personality')
const picture = require('./routes/picture')
const block = require('./routes/block')
const gift = require('./routes/gift')
const send_gift = require('./routes/send_gift')
const conversation = require('./routes/conversation')
const conversation_reply = require('./routes/conversation_reply')
const login = require('./routes/login')
const signup = require('./routes/signup')
const checkToken = require('./utils/checkToken')



const socketio = require('socket.io')
var app = express();

// parse application/x-www-form-urlencoded
// { extended: true } : nested object를 지원한다.
// Returns middleware that ONLY parses url-encoded bodies and 
// This object will contain key-value pairs, where the value can be a 
// string or array(when extended is false), or any type (when extended is true)
app.use(bodyParser.urlencoded({ extended: true }));

//This return middleware that only parses json and only looks at requests where the Content-type
//header matched the type option. 
//When you use req.body -> this is using body-parser cause it is going to parse 
// the request body to the form we want
app.use(bodyParser.json());



var server = app.listen(3000,()=>{
    console.log('iam API serer is running on port number 3000')
})

//User doesn't need a jwt attached to jwt.
app.use('/login',login)
app.use('/signup',signup)

app.use(checkToken)

app.use('/user',user)
app.use('/personality',personality)
app.use('/picture',picture)
app.use('/block',block)
app.use('/gift',gift)
app.use('/send_gift',send_gift)
app.use('/conversation',conversation)
app.use('/conversation_reply',conversation_reply)


//TODO: Need to be moduled..!
//Chat Server

var io = socketio.listen(server)

io.on('connection',function(socket) {
    console.log(`Connection : SocketId = ${socket.id}`)   
    var userName = '';
    
    socket.on('subscribe', function(data) {
        console.log('subscribe trigged')
        const room_data = JSON.parse(data)
        userName = room_data.userName;
        const roomNumber = room_data.roomNumber;
        
        socket.join(`${roomNumber}`)
        console.log(`Username : ${userName} joined Room Number : ${roomNumber}`)
        
        // Let the other user get notification that user got into the room;
        // It can be use to indicate that person has read the messages. (Like turns "unread" to "read")
        
        var sendData = {
            userName : userName
        }
        
        //TODO: need to chose
        //io.to : User who has joined can get a event;
        //socket.broadcast.to : all the users except the user who has joined will get the message
        socket.broadcast.to(`${roomNumber}`).emit('newUserToChatRoom',userName);
    })

    socket.on('undescribe',function(data) {
        console.log('undescribe trigged')
        const room_data = JSON.parse(data)
        const userName = room_data.userName;
        const roomNumber = room_data.roomNumber;
        
        socket.leave(`${roomNumber}`)
        console.log(`Username : ${userName} leaved Room Number : ${roomNumber}`)

    })

    socket.on('newMessage',function(data) {
        console.log('newMessage triggered')

        const messageData = JSON.parse(data)
        const messageContent = messageData.messageContent
        const roomNumber = messageData.roomNumber

        console.log(`[Room Number ${roomNumber}] ${userName} : ${messageContent}`)
        // Just pass the data that has been passed from the writer socket

        const chatData = {
            userName : userName,
            messageContent : messageContent,
            roomNumber : roomNumber
        }
        socket.broadcast.to(`${roomNumber}`).emit('updateChat',JSON.stringify(chatData)) // Need to be parsed into Kotlin object in Kotlin
    })

    socket.on('typing',function(roomNumber){ //Only roomNumber is needed here
        console.log('typing triggered')
        socket.broadcast.to(`${roomNumber}`).emit('typing')
    })

    socket.on('stopTyping',function(roomNumber){ //Only roomNumber is needed here
        console.log('stopTyping triggered')
        socket.broadcast.to(`${roomNumber}`).emit('stopTyping')
    })

})

module.exports = server; //Exporting for test